<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.tdos.tdospractice.mapper.CourseMapper">

    <resultMap id="CourseResult" type="org.tdos.tdospractice.type.Course">
        <id column="course_id" property="id"/>
        <result column="course_name" property="name"/>
        <result column="pic_url" property="picUrl"/>
        <result column="owner_id" property="ownerId"/>
        <result column="course_introduction" property="introduction"/>
        <result column="start_at" property="startAt"/>
        <result column="end_at" property="endAt"/>
        <result column="status" property="status"/>
        <result column="type" property="type"/>
        <result column="model_id" property="modelId"/>
        <result column="class_id" property="classId"/>
        <result column="created_at" property="createdAt"/>
        <collection property="chapters" ofType="org.tdos.tdospractice.type.Chapter">
            <id column="chapter_id" property="id"/>
            <result column="chapter_name" property="name"/>
            <result column="chapter_introduction" property="introduction"/>
            <result column="chapter_order" property="order"/>
            <collection property="sections" ofType="org.tdos.tdospractice.type.Section">
                <id column="section_id" property="id"/>
                <result column="section_name" property="name"/>
                <result column="section_order" property="order"/>
                <collection property="smallSections" ofType="org.tdos.tdospractice.type.SmallSection">
                    <id column="small_section_id" property="id"/>
                    <result column="small_section_name" property="name"/>
                    <result column="small_section_order" property="order"/>
                </collection>
            </collection>
        </collection>
    </resultMap>


    <select  id="getAdminCourseList" resultMap="CourseResult">
        SELECT c.id ::"varchar" as course_id,c.name as course_name,c.pic_url,c.owner_id,c.introduction as course_introduction,c.start_at, c.end_at,c.status,c."type",c.model_id,cc.class_id,
chapter.id ::"varchar" as chapter_id, chapter.name as chapter_name, chapter.introduction as chapter_introduction, chapter."order" as chapter_order ,
section.id ::"varchar" as section_id, section.name as section_name, section."order" as section_order
from course_chapter_section ccs
left join class_course cc on cc.course_id::uuid = ccs.course_id
inner join course c on c.id = ccs.course_id and c.type = 0 and c.status = 1
<if test="name != null">
    and c.name like  concat('%',#{name},'%')
</if>
inner join chapter on chapter.id = ccs.chapter_id
inner join "section" on "section".id = ccs.section_id
    </select>

    <select  id="getAdminUnpublishedCourseList" resultMap="CourseResult">
        SELECT
        c.id :: "varchar" AS course_id,
        c.NAME AS course_name,
        c.pic_url,
        c.owner_id,
        c.introduction AS course_introduction,
        c.start_at,
        c.end_at,
        c.STATUS,
        c."type",
        c.model_id
        FROM course c
        Where c.type = 0
        AND c.STATUS = 0
        <if test="name != null" >
            AND c.NAME LIKE concat('%',#{name},'%')
        </if>
        AND c.owner_id = #{userId}
    </select>

    <select  id="getAdminUnpublishedCourseListPerfect" resultMap="CourseResult">
        SELECT
        c.id :: "varchar" AS course_id,
        c.NAME AS course_name,
        c.pic_url,
        c.owner_id,
        c.introduction AS course_introduction,
        c.start_at,
        c.end_at,
        c.STATUS,
        c."type",
        c.model_id,
        cc.class_id,
        chapter.id :: "varchar" AS chapter_id,
        chapter.NAME AS chapter_name,
        chapter.introduction AS chapter_introduction,
        chapter."order" AS chapter_order,
        section.id :: "varchar" AS section_id,
        section.NAME AS section_name,
        section."order" AS section_order
        FROM course c
        INNER JOIN course_chapter_section ccs on ccs.course_id = c.id
        LEFT JOIN class_course cc ON cc.course_id :: uuid = ccs.course_id
        INNER JOIN chapter ON chapter.id = ccs.chapter_id
        INNER JOIN "section" ON "section".id = ccs.section_id
        WHERE
        c.id  IN
        <foreach collection="courseIds" item="courseId" open="(" close=")" separator=",">
            #{courseId}::uuid
        </foreach>
    </select>

    <select  id="hasCourseExist" resultType="int">
        select count(*) from course where id=#{id}::uuid
    </select>

    <select  id="getCourseByCourseId" resultMap="CourseResult">
        SELECT c.id ::"varchar" as course_id,c.name as course_name,c.pic_url,c.owner_id,c.introduction as course_introduction,c.start_at, c.end_at,c.status,c."type",c.model_id,cc.class_id,
chapter.id ::"varchar" as chapter_id, chapter.name as chapter_name, chapter.introduction as chapter_introduction, chapter."order" as chapter_order ,
section.id ::"varchar" as section_id, section.name as section_name, section.order as section_order,
small_section.id ::"varchar" as small_section_id, small_section.name as small_section_name, small_section.order as small_section_order
from course_chapter_section ccs
left join class_course cc on cc.course_id::uuid = ccs.course_id
inner join course c on c.id = ccs.course_id and c.id = #{courseId}::uuid
inner join chapter on chapter.id = ccs.chapter_id
inner join "section" on "section".id = ccs.section_id
inner join "small_section" on "small_section".id = ccs.small_section_id
    </select>


    <insert id = "insertCourse" useGeneratedKeys="true" keyProperty="id">
        insert into course(name, pic_url, introduction, start_at, end_at, status, owner_id, type, model_id) values (#{name},#{picUrl},#{introduction},#{startAt},#{endAt},#{status},#{ownerId},#{type},#{modelId});
    </insert>

    <select  id="getCourseListById" resultMap="CourseResult">
        SELECT c.id as course_id,c.name as course_name,c.pic_url,c.owner_id,c.introduction as course_introduction,c.start_at, c.end_at,c.status,c."type",c.model_id,cc.class_id,
chapter.id as chapter_id, chapter.name as chapter_name, chapter.introduction as chapter_introduction, chapter."order" as chapter_order ,
section.id as section_id, section.name as section_name, section.order as section_order
from course_chapter_section ccs
left join class_course cc on cc.course_id::uuid = ccs.course_id
inner join course c on c.id = ccs.course_id and c.type = 1 and c.owner_id = #{userId}
<if test="name != null">
    and c.name like  concat('%',#{name},'%')
</if>
inner join chapter on chapter.id = ccs.chapter_id
inner join "section" on "section".id = ccs.section_id order by c.created_at desc
    </select>

    <select  id="findCourseChapterOrder" resultType="java.lang.Integer">
        select max(chapter."order") from chapter inner join course_chapter_section ccs on ccs.chapter_id = chapter.id where course_id= #{courseId}::uuid
    </select>

    <select  id="findCourseChapterSectionOrder" resultType="java.lang.Integer">
        select max("section"."order") from section inner join course_chapter_section ccs on ccs.section_id = section.id where course_id= #{courseId}::uuid and chapter_id= #{chapterId}::uuid
    </select>

    <select  id="findSmallSectionOrder" resultType="java.lang.Integer">
        select max("small_section"."order") from small_section inner join course_chapter_section ccs on ccs.small_section_id = small_section.id and ccs.section_id= #{sectionId}::uuid
    </select>

    <update  id="modifyCourseStatus">
        update course set status = 1
        <if test="start != null">
            , start_at = #{start} :: timestamp
        </if>
        <if test="end != null">
            , end_at = #{end} :: timestamp
        </if>
        where id= #{courseId}::uuid
    </update>

    <select  id="getCourseList" resultMap="CourseResult">
        SELECT
        c.id AS course_id,
        c.NAME AS course_name,
        c.pic_url,
        c.owner_id,
        c.introduction AS course_introduction,
        c.start_at,
        c.end_at,
        c.STATUS,
        c."type",
        c.model_id
        FROM
        course c
        Where c.type = 1
        AND c.STATUS = 1
        <if test = "start != null" >
            AND c.start_at &gt;= #{start} :: timestamp
        </if>
        <if test = "end != null" >
            AND c.end_at &lt;= #{end} :: timestamp
        </if>
        INNER JOIN class_course cc ON cc.course_id = ccs.course_id ::VARCHAR
        INNER JOIN "sim_user" ON sim_user.class_id = cc.class_id
        AND sim_user."id" = #{userId}
    </select>

    <select  id="getCourseListPerfect" resultMap="CourseResult">
        SELECT
        c.id AS course_id,
        c.NAME AS course_name,
        c.pic_url,
        c.owner_id,
        c.introduction AS course_introduction,
        c.start_at,
        c.end_at,
        c.STATUS,
        c."type",
        c.model_id,
        cc.class_id,
        chapter.id AS chapter_id,
        chapter.NAME AS chapter_name,
        chapter.introduction AS chapter_introduction,
        chapter."order" AS chapter_order,
        section.id AS section_id,
        section.NAME AS section_name,
        section.ORDER AS section_order
        FROM
        course c
        INNER JOIN course_chapter_section ccs ON  ccs.course_id = c.id
        INNER JOIN chapter ON chapter.id = ccs.chapter_id
        INNER JOIN "section" ON "section".id = ccs.section_id
        INNER JOIN class_course cc ON cc.course_id = ccs.course_id ::VARCHAR
        INNER JOIN "sim_user" ON sim_user.class_id = cc.class_id
        WHERE
        c.id  IN
        <foreach collection="courseIds" item="courseId" open="(" close=")" separator=",">
            #{courseId}::uuid
        </foreach>
    </select>

    <select  id="getExpiredList" resultMap="CourseResult">
     SELECT
	c.id AS course_id,
	c.NAME AS course_name,
	c.pic_url,
	c.owner_id,
	c.introduction AS course_introduction,
	c.start_at,
	c.end_at,
	c.STATUS,
	c."type",
	c.model_id
FROM
    course c
	WHERE c.type = 1
	AND c.STATUS = 1
	AND c.end_at &lt; now( ) ::TIMESTAMP
    </select>

    <select  id="getExpiredListPerfect" resultMap="CourseResult">
        SELECT
	c.id AS course_id,
	c.NAME AS course_name,
	c.pic_url,
	c.owner_id,
	c.introduction AS course_introduction,
	c.start_at,
	c.end_at,
	c.STATUS,
	c."type",
	c.model_id,
	chapter.id AS chapter_id,
	chapter.NAME AS chapter_name,
	chapter.introduction AS chapter_introduction,
	chapter."order" AS chapter_order,
	section.id AS section_id,
	section.NAME AS section_name,
	section.ORDER AS section_order
FROM
    course c
	INNER JOIN course_chapter_section ccs ON  ccs.course_id = c.id
INNER JOIN chapter ON chapter.id = ccs.chapter_id
INNER JOIN "section" ON "section".id = ccs.section_id
 WHERE
    c.id  IN
<foreach collection="courseIds" item="courseId" open="(" close=")" separator=",">
    #{courseId}::uuid
</foreach>
    </select>




    <select  id="getAdminCourseListByClassId" resultMap="CourseResult">
        SELECT c.id ::"varchar" as course_id,c.name as course_name, c.pic_url, c.owner_id, c.introduction as course_introduction, c.start_at, c.end_at, c.status, c."type", c.model_id,cc.class_id,
chapter.id ::"varchar" as chapter_id, chapter.name as chapter_name, chapter.introduction as chapter_introduction, chapter."order" as chapter_order ,
section.id ::"varchar" as section_id, section.name as section_name, section."order" as section_order
from course_chapter_section ccs
left join class_course cc on cc.course_id::uuid = ccs.course_id
inner join course c on c.id = ccs.course_id and c.type = 1 and c.status = 1
inner join chapter on chapter.id = ccs.chapter_id
inner join "section" on "section".id = ccs.section_id where cc.class_id = #{classId}
    </select>

    <select  id="getCourseById" resultMap="CourseResult">
        SELECT c.id ::"varchar" as course_id,c.name as course_name, c.pic_url, c.owner_id, c.introduction as course_introduction, c.start_at, c.end_at, c.status, c."type", c.model_id,cc.class_id,
chapter.id ::"varchar" as chapter_id, chapter.name as chapter_name, chapter.introduction as chapter_introduction, chapter."order" as chapter_order ,
section.id ::"varchar" as section_id, section.name as section_name, section."order" as section_order,
small_section.id ::"varchar" as small_section_id, small_section.name as small_section_name, small_section.order as small_section_order
from course_chapter_section ccs
left join class_course cc on cc.course_id::uuid = ccs.course_id
inner join course c on c.id = ccs.course_id
inner join chapter on chapter.id = ccs.chapter_id
inner join "section" on "section".id = ccs.section_id
inner join "small_section" on "small_section".id = ccs.small_section_id where ccs.course_id = #{courseId} :: uuid
    </select>

</mapper>
