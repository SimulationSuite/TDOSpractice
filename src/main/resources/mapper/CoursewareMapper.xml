<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.tdos.tdospractice.mapper.CoursewareMapper">

    <select  id="getCoursewareAll" resultType="org.tdos.tdospractice.entity.CoursewareEntity">
        select c.id, c.name, c.kind, c.type, c.url, c.category_id as categoryId,
        c.duration, c.size, c.created_at as createdAt, c.updated_at as updatedAt
        from courseware c
        where c.id is not null
        <if test="name != null" >
            and c.name like  concat('%',#{name},'%')
        </if>
        <if test="kind != null" >
            and c.kind = #{kind}
        </if>
        <if test="type != null" >
            and c.type = #{type}
        </if>
        <if test="categoryId != null and categoryId != ''" >
            and c.category_id = #{categoryId}
        </if>
        <if test="chapterId != null and chapterId != ''" >
            and c.id not in select csc.courseware_id from chapter_section_courseware csc where csc.chapter_id = #{chapterId}
        </if>
        <if test="sectionId != null and sectionId != ''" >
            and c.id not in select csc.courseware_id from chapter_section_courseware csc where csc.section_id = #{sectionId}
        </if>
    </select>

    <select  id="getCoursewareByClassId" resultType="org.tdos.tdospractice.entity.CoursewareEntity">
        select c.id, c.name, c.kind, c.type, c.url, c.category_id as categoryId,
        c.duration, c.size, c.created_at as createdAt, c.updated_at as updatedAt
        from chapter_section_courseware csc
        inner join courseware c on c.id = csc.courseware_id
        inner join course_chapter_section ccs on (ccs.section_id = csc.section_id or ccs.chapter_id = csc.chapter_id)
        inner join class_course cc on cc.course_id = ccs.course_id
        where cc.class_id =#{classId} ::uuid
    </select>

    <select  id="getCoursewareBySectionId" resultType="org.tdos.tdospractice.entity.CoursewareEntity">
        select c.id, c.name, c.kind, c.type, c.url, c.category_id as categoryId,
        c.duration, c.size, c.created_at as createdAt, c.updated_at as updatedAt
        from chapter_section_courseware csc
        inner join courseware c on c.id = csc.courseware_id
        where csc.section_id =#{sectionId} ::uuid
        <if test="kind != null" >
            and c.kind = #{kind}
        </if>
        <if test="type != null" >
            and c.type = #{type}
        </if>
    </select>

    <select  id="getCoursewareByChapterId" resultType="org.tdos.tdospractice.entity.CoursewareEntity">
        select c.id, c.name, c.kind, c.type, c.url, c.category_id as categoryId,
        c.duration, c.size, c.created_at as createdAt, c.updated_at as updatedAt
        from chapter_section_courseware csc
        inner join courseware c on c.id = csc.courseware_id
        where csc.chapter_id =#{chapterId} ::uuid
        <if test="kind != null" >
            and c.kind = #{kind}
        </if>
        <if test="type != null" >
            and c.type = #{type}
        </if>
    </select>

    <select  id="getCoursewareByCourseId" resultType="org.tdos.tdospractice.entity.CoursewareEntity">
        select c.id, c.name, c.kind, c.type, c.url, c.category_id as categoryId,
        c.duration, c.size, c.created_at as createdAt, c.updated_at as updatedAt
        from chapter_section_courseware csc
        inner join courseware c on c.id = csc.courseware_id
        inner join course_chapter_section ccs on (ccs.section_id = csc.section_id or ccs.chapter_id = csc.chapter_id)
        where ccs.course_id =#{courseId} ::uuid
        <if test="kind != null" >
            and c.kind = #{kind}
        </if>
        <if test="type != null" >
            and c.type = #{type}
        </if>
    </select>

    <delete id="deleteCoursewareById">
        delete from courseware where id=#{id}::uuid;
    </delete>

    <delete id="deleteChapterSectionCourseById">
        delete from chapter_section_courseware
        where courseware_id=#{coursewareId}::uuid and chapter_id = #{chapterId}::uuid and section_id = #{sectionId}::uuid;
    </delete>

    <update id="modifyCoursewareNameById">
        update courseware set name= #{coursewareName} where id=#{id}::uuid;
    </update>

    <insert id="addCourseware" useGeneratedKeys="true" keyProperty="id">
        insert into courseware (name, kind, type, url, duration, size, category_id)
        values
        (#{name}, #{kind}, #{type}, #{url}, #{duration}, #{size}, #{categoryId});
    </insert>

    <select id="ifSectionCourseware"  resultType="Boolean">
        select case when count(*) = 1 then true else false end
        from chapter_section_courseware csc
        where csc.courseware_id=#{id} ::uuid
    </select>

    <select id="ifSectionCoursewarePub"  resultType="Boolean">
        select distinct c.status = 0
        from chapter_section_courseware csc
        inner join course_chapter_section ccs on (ccs.section_id = csc.section_id or ccs.chapter_id = csc.chapter_id)
        inner join course c on c.id = ccs.course_id
        where csc.courseware_id=#{id} ::uuid
    </select>

    <select id="hasSectionCoursewareId"  resultType="int">
        select count(*) from courseware where id=#{id}::uuid
    </select>

    <insert id="addChapterSectionCourseware" useGeneratedKeys="true" keyProperty="id">
        insert into section_courseware (section_id, chapter_id, courseware_id)
        values
        (#{sectionId}, #{chapterId}, #{coursewareId});
    </insert>

</mapper>
