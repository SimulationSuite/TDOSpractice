<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.tdos.tdospractice.mapper.AssignmentMapper">

    <select  id="getStudentAssignment" resultType="org.tdos.tdospractice.type.StudentAssignment">
        select distinct a.id as assignmentId, a.name as assignmentName, a.end_at as endAt,
        case when ss.score is null then -1 else ss.score end as score ,
        case when sa.status is null then -1 else sa.status end as status
        from assignment a
        inner join course_chapter_section ccs on ccs.section_id = a.section_id
        inner join course ci on ci.id = ccs.course_id
        inner join class_course cc on cc.course_id = ci.id
        inner join sim_user su on su.class_id = cc.class_id
        left join student_score ss on ss.assignment_id = a.id and ss.user_id = su.id
        left join student_answer sa on sa.assignment_id = a.id and sa.user_id = su.id
        where su.id = #{userId} and a.status = 1 and ci.status != 2
        <if test="courseId != null and courseId != ''" >
            and ccs.course_id = #{courseId} ::uuid
        </if>
        <if test="chapterId != null and chapterId != ''" >
            and ccs.chapter_id = #{chapterId} ::uuid
        </if>
        <if test="sectionId != null and sectionId != ''" >
            and ccs.section_id = #{sectionId} ::uuid
        </if>
        <if test="name != null and name != ''">
            and a.name like concat('%',#{name},'%')
        </if>
        <if test="status != '' and status != null and status == '0'.toString()" >
            and (sa.status is null or sa.status = 0)
        </if>
        <if test="status != '' and status != null and status == '1'.toString()" >
            and sa.status = 1
        </if>
        group by a.id, a.name, a.end_at, ss.score, sa.status
    </select>

    <select  id="getAssignmentAll" resultType="org.tdos.tdospractice.type.StudentAssignment">
        select distinct sa.assignment_id as assignmentId, sa.user_id as userId, su.name as userName,
        case when ss.status is null then 0 else ss.status end as status,
        sa.committed_at as committedAt, a.name as assignmentName, c.name as className
        from student_answer sa
        inner join assignment a on a.id = sa.assignment_id
        inner join sim_user su on su.id = sa.user_id
        inner join course_chapter_section ccs on ccs.section_id = a.section_id
        inner join course ci on ci.id = ccs.course_id
        inner join class_course cc on cc.course_id = ci.id
        inner join class c on c.id = su.class_id
        left join student_score ss on ss.assignment_id = sa.assignment_id and ss.user_id = sa.user_id
        where sa.status = 1 and ci.status != 2
        <if test="classId != null and classId != ''" >
            and cc.class_id = #{classId} ::uuid
        </if>
        <if test="courseId != null and courseId != ''" >
            and ccs.course_id = #{courseId} ::uuid
        </if>
        <if test="chapterId != null and chapterId != ''" >
            and ccs.chapter_id = #{chapterId} ::uuid
        </if>
        <if test="sectionId != null and sectionId != ''" >
            and ccs.section_id = #{sectionId} ::uuid
        </if>
        <if test="name != null and name != ''" >
            and (su.name like concat('%',#{name},'%') or sa.user_id like concat('%',#{name},'%'))
        </if>
        <if test="startTime != null and startTime != ''" >
            and ss.updated_at &gt;= #{startTime}::timestamp
        </if>
        <if test="endTime != null and endTime != ''" >
            and ss.updated_at &lt;= #{endTime}::timestamp
        </if>
        <if test="ownerId != null and ownerId != ''" >
            and ci.owner_id = #{ownerId}
        </if>
        <if test="status != '' and status != null and status == '0'.toString()" >
            and (ss.status is null or ss.status = 0)
        </if>
        <if test="status != '' and status != null and status == '1'.toString()" >
            and ss.status = 1
        </if>
        group by sa.user_id, sa.assignment_id, ss.status, sa.committed_at, su.name, a.name, c.name
        order by c.name
    </select>

    <select  id="getAllStudentAssignmentBySectionId" resultType="org.tdos.tdospractice.entity.StudentAnswerEntity">
        select su.id as userId, su.name
        from assignment a
        inner join course_chapter_section ccs on ccs.section_id = a.section_id
        inner join class_course cc on cc.course_id = ccs.course_id
        inner join sim_user su on su.class_id = cc.class_id
        where a.section_id =#{sectionId} ::uuid
        group by su.id, su.name
    </select>

    <select  id="getSubStudentAssignmentBySectionId" resultType="org.tdos.tdospractice.entity.StudentAnswerEntity">
        select sa.user_id as userId, su.name
        from student_answer sa
        inner join assignment a on a.id = sa.assignment_id
        inner join sim_user su on su.id = sa.user_id
        where a.section_id =#{sectionId} ::uuid and sa.status = 1
        group by sa.user_id, sa.assignment_id, su.name
    </select>

    <select  id="getAssignmentByClassId" resultType="org.tdos.tdospractice.entity.AssignmentEntity">
        select a.id, a.section_id as sectionId, a.name, a.end_at as endAt, a.qualified_score as qualifiedScore,
        a.created_at as createdAt, a.updated_at as updatedAt
        from assignment a
        inner join course_chapter_section ccs on ccs.section_id = a.section_id
        inner join course ci on ci.id = ccs.course_id
        inner join class_course cc on cc.course_id = ci.id
        where cc.class_id = #{ClassId} ::uuid
    </select>

    <select  id="getAssignmentByCourseId" resultType="org.tdos.tdospractice.entity.AssignmentEntity">
        select DISTINCT a.id, a.section_id as sectionId, a.name, a.end_at as endAt, a.qualified_score as qualifiedScore,
        a.created_at as createdAt, a.updated_at as updatedAt
        from assignment a
        inner join course_chapter_section ccs on ccs.section_id = a.section_id
        inner join course ci on ci.id = ccs.course_id
        where ccs.course_id =#{courseId} ::uuid
    </select>

    <select  id="getAssignmentByChapterId" resultType="org.tdos.tdospractice.entity.AssignmentEntity">
        select a.id, a.section_id as sectionId, a.name, a.end_at as endAt, a.qualified_score as qualifiedScore,
        a.created_at as createdAt, a.updated_at as updatedAt
        from assignment a
        inner join course_chapter_section ccs on ccs.section_id = a.section_id
        where ccs.chapter_id =#{ChapterId} ::uuid
    </select>

    <select  id="getAssignmentNameBySectionId" resultType="org.tdos.tdospractice.entity.AssignmentEntity">
        select a.id, a.section_id as sectionId, a.name, a.end_at as endAt, a.qualified_score as qualifiedScore,
        a.created_at as createdAt, a.updated_at as updatedAt, a.status as status
        from assignment a
        where a.section_id =#{sectionId} ::uuid
    </select>

    <select  id="ifAssignmentBySectionId" resultType="Boolean">
        select case when count(*) = 1 then true else false end
        from assignment a
        where a.section_id =#{sectionId} ::uuid
    </select>

    <select  id="getAssignmentBySectionId" resultType="org.tdos.tdospractice.type.AssignmentQuestionBack">
        select qb.id, a.section_id as sectionId, a.name, a.end_at as endAt, a.qualified_score as qualifiedScore,
        qb.type, qb.content, qb.choice, qb.answer, qb.pic_url as picUrl, a.status, qba.score, qba.id as questionBackAssignmentId
        from assignment a
        inner join question_back_assignment qba on qba.assignment_id = a.id
        inner join question_back qb on qb.id = qba.question_id
        where a.section_id =#{sectionId} ::uuid
        <if test="type != null" >
            and qb.type = #{type}
        </if>
        order by qb.type
    </select>

    <delete id="deleteAssignmentById">
        delete from assignment where id=#{id}::uuid;
    </delete>

    <select id="ifSectionAssignmentByAssignmentId"  resultType="int">
        select a.status
        from assignment a
        where a.id =#{id}::uuid;
    </select>

    <update id="modifyAssignmentNameById">
        update assignment set name = #{name}, end_at = #{endAt}::timestamp where id=#{id}::uuid;
    </update>

    <insert id="addAssignment" useGeneratedKeys="true" keyProperty="id">
        insert into assignment (section_id, name, end_at, qualified_score) values (#{sectionId}::uuid, #{name}, #{endAt}::timestamp , #{qualifiedScore});
    </insert>

    <insert id="addAssignmentList" parameterType="java.util.List">
        insert into assignment (section_id, name, end_at, qualified_score)
        values
        <foreach collection="assignmentList" item="item" separator=",">
            (
            #{item.sectionId}::uuid,
            #{item.name},
            #{item.endAt}::timestamp,
            #{item.qualifiedScore}
            )
        </foreach>
    </insert>

    <update id="modifyAssignmentStatusById">
        update assignment set status = #{status} where id=#{id}::uuid;
    </update>

    <select  id="getEndAssignment" resultType="org.tdos.tdospractice.entity.AssignmentEntity">
        select a.id, a.section_id as sectionId, a.end_at as endAt, a.qualified_score as qualifiedScore,
        a.created_at as createdAt, a.updated_at as updatedAt
        from assignment a
        where a.end_at &lt;= #{endTime}::timestamp
    </select>

    <select  id="getUsers" resultType="String">
        select distinct cc.user_id
        from assignment a
        inner join course_chapter_section ccs on ccs.section_id = a.section_id
        inner join course ci on ci.id = ccs.course_id
        inner join class_course cc on cc.course_id = ci.id
        where a.id =#{assignmentId} ::uuid
    </select>

    <select  id="ifStudentAnswer" resultType="int">
        select count(*)
        from student_answer
        where assignment_id =#{assignmentId} ::uuid and user_id = #{userId}
    </select>

    <select  id="studentAnswerStatus" resultType="int">
        select distinct case when status is null then 0 else status end as status
        from student_answer
        where assignment_id =#{assignmentId} ::uuid and user_id = #{userId}
    </select>

    <select  id="getQuestionBackByAssignment" resultType="org.tdos.tdospractice.entity.StudentAnswerEntity">
        select qb.id as questionId, qba.assignment_id as assignmentId, qb.content as name, '' as anwser,
        0 as score, 1 as status
        from question_back qb
        inner join question_back_assignment qba on qba.question_id = qb.id
        where qba.assignment_id =#{assignmentId} ::uuid
    </select>

    <select id="hasAssignmentNameExist"  resultType="int">
        select count(*) from assignment where name=#{name}
        <if test="assignmentId != null and assignmentId != ''" >
            and id != #{assignmentId} ::uuid
        </if>
    </select>

    <delete id="deleteQuestionBackAssignmentById">
        delete from question_back_assignment where id=#{id}::uuid;
    </delete>

</mapper>
