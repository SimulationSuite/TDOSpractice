<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.tdos.tdospractice.mapper.QuestionBackMapper">

    <select  id="getQuestionBackAll" resultType="org.tdos.tdospractice.entity.QuestionBackEntity">
        select qb.id, qb.type, qb.content, qb.choice, qb.answer, qb.pic_url as picUrl, qb.model_id as modelId,
        qb.category_id as categoryId, qb.created_at as createdAt, qb.updated_at as updatedAt
        from question_back qb
        where qb.id is not null
        <if test="content != null" >
            and qb.content like  concat('%',#{content},'%')
        </if>
        <if test="type != null" >
            and qb.type = #{type}
        </if>
        <if test="categoryId != null and categoryId != ''" >
            and qb.category_id = #{categoryId}
        </if>
        <if test="assignmentId != null and assignmentId != ''" >
            and qb.id not in (select qba.question_id from question_back_assignment qba where qba.assignment_id = #{assignmentId}::uuid)
        </if>
    </select>

    <select  id="getStudentAnswerByAssignment" resultType="org.tdos.tdospractice.type.StudentQuestionAnswer">
        select qb.id, qb.type, qb.content, qb.choice, qb.answer, qb.pic_url as picUrl, qb.model_id as modelId,
        qb.category_id as categoryId, sa.answer as studentAnswer, qba.score as totalScore,sa.score as score
        from question_back qb
        inner join question_back_assignment qba on qba.question_id = qb.id
        left join student_answer sa on sa.assignment_id = qba.assignment_id and sa.question_id = qb.id and sa.user_id = #{userId}
        where qba.assignment_id =#{assignmentId} ::uuid
    </select>

    <delete id="deleteQuestionBackById">
        delete from question_back where id=#{id}::uuid;
    </delete>

    <delete id="deleteQuestionBackAssignmentByAssignmentId">
        delete from question_back_assignment where assignment_id=#{assignmentId}::uuid;
    </delete>

    <select id="ifExistId"  resultType="Boolean">
        select case when count(*) > 1 then true else false end
        from question_back_assignment qba
        where qba.question_id =#{id}::uuid;
    </select>

    <select id="ifSectionQuestionBackByQuestionBackId">
        select distinct ci.status = 0
        from question_back_assignment qba
        inner join assignment a on a.id = qba.assignment_id
        inner join course_chapter_section ccs on ccs.section_id = a.section_id
        inner join course ci on ci.id = ccs.course_id
        where qba.question_id =#{id}::uuid;
    </select>

    <update id="modifyQuestionBackNameById">
        update question_back
        set type = #{type}, content = #{content}, choice = #{choice}, answer = #{answer}, pic_url = #{picUrl},
        model_id = #{modelId}, category_id = #{categoryId}
        where id=#{id}::uuid;
    </update>

    <insert id="addQuestionBack" useGeneratedKeys="true" keyProperty="id">
        insert into question_back (type, content, choice, answer, pic_url, model_id, category_id)
        values
        (#{type}, #{content}, #{choice}, #{answer}, #{picUrl}, #{modelId}, #{categoryId});
    </insert>

    <insert id="addQuestionBackAssignment" useGeneratedKeys="true" keyProperty="id">
        insert into question_back_assignment (assignment_id, question_id, score)
        values
        (#{assignmentId}, #{questionId}, #{score});
    </insert>

    <insert id="addQuestionBackAssignmentList" parameterType="java.util.List">
        insert into question_back_assignment (assignment_id, question_id, score)
        values
        <foreach collection="questionBackAssignmentList" item="item" separator=",">
            (
            #{item.assignmentId}::uuid,
            #{item.questionId}::uuid,
            #{item.score}
            )
        </foreach>
    </insert>

    <select id="hasQuestionBackNameExist"  resultType="int">
        select count(*)
        from question_back qb
        where qb.content =#{content};
    </select>

</mapper>
